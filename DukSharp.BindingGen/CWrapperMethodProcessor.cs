using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DukSharp.BindingGen
{
    internal class CWrapperMethodProcessor : IMethodProcessor
    {
        private StringBuilder _csb;

        public List<string> CLines { get; } = new List<string>();

        public string Prefix { get; set; }

        public void Begin()
        {
            _csb = new StringBuilder();
            _csb.Append(GetCPreamble());
        }

        private string GetWrapperForFunction(Method method)
        {
            var sb = new StringBuilder();

            sb.Append($"WRAPPED_EXPORT_CALL {method.Return.Type.TypeString} {Prefix}{method.Return.Name}(");

            for (int i = 0; i < method.Args.Length; i++)
            {
                var arg = method.Args[i];

                if (arg.Type.TypeString == "")
                {
                    Console.WriteLine($"Skipping method \"{method.Return.Name}\", no type for argument \"{arg.Name}\"");
                    return null;
                }

                sb.Append(arg.Type.TypeString);
                sb.Append(' ');
                sb.Append(arg.Name);

                if (i + 1 != method.Args.Length)
                    sb.Append(", ");
            }

            sb.Append(")\n{\n\t");

            if (!(method.Return.Type.Name == "void" && method.Return.Type.PointerLevel == 0))
                sb.Append("return ");

            sb.Append(method.Return.Name);
            sb.Append('(');
            for (int i = 0; i < method.Args.Length; i++)
            {
                var arg = method.Args[i];
                sb.Append(arg.Name);
                if (i + 1 != method.Args.Length)
                    sb.Append(", ");
            }
            sb.Append(");\n}\n");

            return sb.ToString();
        }

        private string GetCPreamble()
        {
            var sb = new StringBuilder();
            sb.Append(string.Join("\n", CLines));
            sb.Append(@"// AUTOGENERATED CODE: DO NOT EDIT. YOUR CHANGES WILL BE LOST.
#ifdef _WIN32
#define WRAPPED_EXPORT_CALL __declspec(dllexport)
#else
#define WRAPPED_EXPORT_CALL
#endif

");
            return sb.ToString();
        }

        public Method ProcessMethod(Method method)
        {
            string wrapper = GetWrapperForFunction(method);
            if (wrapper == null)
                return null;

            _csb.Append(wrapper);
            _csb.Append('\n');

            return new Method(new Argument(Prefix + method.Return.Name, method.Return.Type), method.Args);
        }

        public string GetOutput()
        {
            return _csb.ToString();
        }
    }
}
